alias value is missing: alias value value
setenv


	//printf("inside execute pipe\n");

	if(pipeFds[pipePos] == NULL){
		int i = 0;
		for(i; i <= numPipes; ++i){
			int fd[2];
			pipeFds[i] = fd;
			pipe(pipeFds[i]);
		}
	}
	

	//printf("numPipes: %d\n", numPipes);
		
	switch (pid[pipePidPos++] = fork()) {
		case 0: // child 
			if(cmdTabPos == 1){ 				//first command before pipe; uses stdIn
				//dup2(pipeFds[pipePos][1], STDOUT_FILENO);	// this end of the pipe becomes the standard output 
				//close(pipeFds[pipePos][0]); 		// this process don't need the other end 
				close(1);
				int temp = dup(pipeFds[pipePos][1]);
			} else if (cmdTabPos == lastPipePos + 2) {	//last command after all pipes; uses stdOut
				dup2(pipeFds[pipePos][0], STDIN_FILENO);	// this end of the pipe becomes the standard input 
				//close(pipeFds[pipePos][1]);		// this process doesn't need the other end 
				close(pipeFds[pipePos][0]);
				//int temp = dup(pipeFds[1][0]);
			} else {							//cmds between pipes; change in and out;
				dup2(pipeFds[pipePos][0], STDIN_FILENO);	// this end of the pipe becomes the standard input
				dup2(pipeFds[++pipePos][1], STDOUT_FILENO);	// this end of the pipe becomes the standard output 
				//int temp = dup(pipeFds[0][0]);
				//temp = dup(pipeFds[1][1]);
			}

			int k;
			for(k=0; k <= numPipes ; ++k){
				close(pipeFds[k][0]); close(pipeFds[k][1]); 	// this is important! close both file descriptors on the pipe 
			}

			pipeStatus = execvp(curCmd->name, curCmd->args);	// run the command 
			
			if(pipeStatus){
				fprintf(stderr, "inside fork: process %d exits with %d\n", pid[pipePidPos - 1], pipeStatus);
				exit(1);
			}
			perror(curCmd->name);	// it failed!

		default: // parent does nothing 
			break;

		case -1:
			printf("fork error\n");
			perror("fork");
			exit(1);
	}

	if (cmdTabPos == lastPipePos + 2) {
		int k;
		for(k=0; k <= numPipes ; ++k){
			close(pipeFds[k][0]); close(pipeFds[k][1]); 	// this is important! close both file descriptors on the pipe 
		}
		for(k=0; k <= numPipes ; ++k){
			waitpid(pid[k], &pipeStatus, 0);
			fprintf(stderr, "process %d exits with %d\n", pid[k], pipeStatus);
		}
		
	}
	
